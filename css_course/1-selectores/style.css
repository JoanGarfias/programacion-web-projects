/*
1) Display inline, block e inline-block

- display: inline;
    Utiliza espacio de un elemento en línea, es decir, 
    se comporta como texto, no tendrá ni ancho ni alto.
- display: block;
    Utilizará todo el ancho de la pantalla. Este si tiene
    ancho y alto.
- display: inline-block;
    Es una combinación entre inline block, ya que es un 
    elemento de línea pero este SI puede tener ancho y alto.


2) Margin es una propiedad de espaciado hacia afuera
    Es decir: del borde del contenido hacia afuera
    Su orden es: top, right, bottom, left

3) Padding es una propiedad de espaciado hacia dentro
    Es decir: del borde del contenido hacia afuera
    Una diferencia con margin es que padding no tiene valores negativos

4) Formas de centrar un div

- Con margin-left y margin-right
    .div-center{
        margin-left: auto;
        margin-right: auto;
    }

5) Una caja está conformada por lo siguiente
    - EL contenido
    - El Padding que lo rodea
    - El borde que lo rodea

    NOTA: El margin no pertenece a la caja.

6) box-sizing
    Es una manera de hacer que la caja tenga
    el tamaño y altura especifica que se especifica (literalmente el tamaño del modelo de caja será el especificado)
    con las propiedades width y height

7) Propiedades lógicas
    Cambian el margin y padding
    (top, right, bottom, left)

    Hacen referencia a cómo esta construida
    tu página:

    margin-block-start
    margin-block-end
    padding-inline-start
    padding-inline-end
    
    Estas propiedades sirven mucho para que una página necesite verse en diferentes idiomas
    por ejemplo: en los idiomas como el árabe se lee de derecha a izquierda. Entonces, usar estas propiedades
    se adaptan al "idioma" por así decirlo.

8) La propiedad "border" en realidad es un shorthand para tres propiedades:
    - border-width
    - border-style
    - border-color

    Ejemplo: 
        border: 1px solid red;
    
    Valores posibles de border-style: solid, dashed, dotted, etc.
    A su ves cada propiedad de border como: border-width, border-style y border-color
    son un shorthand por ejemplo:
    border-width puede extendeser a border-left-width, border-right-width,
    border-top-width, border-bottom-width

9) Bordet radius

    Podemos crear triangulos con las proiedades
    border-width y border-color

    Ejemplo:

    .box{
        border-bottom-style: dashed;
        border-width: 50px;
        border-color: red transparent blue transparent;
    }

    NOTA:
    Con border-radius podemos crear figuras
    Por ejemplo:

    .circle{
        border-radius: 30px 60px 120px 90px;
    }

10) outline
    Es un borde que no pertenece al modelo de caja}

    Se suelen utilizar mucho en los formularios 
    (ejemplo: campos obligatorios, marcar elementos en foco, etc).


11) box-shadow

    Sintaxis: 
    box-shadow: h v blue spread
    color | inset;

    h: movimiento horizontal
    
    v: momiento vertical
    
    blur: es el difuminado (qué tan borrosa será la copia)
    
    spread: Qué tanto crece o se comprime la 
    sombra en sus cuatro lados.

    Ejemplo:

    box-shadow: 5px 5px 2px rgba(0,0,0,0.8);


12) Psudoclases
    Son selectores que tienen condiciones
    Algunos son:
    :hover, :active, :visited

    Tomar en cuenta los espacios entre
    el elemento y una pseudoclase

    h1:hover{
        Aquí se aplicará hover a un elemento
        de h1
    }

    h1 :hover{
        Aquí se aplicará hover
        a los hijos de h1
    }

    Expliación de cada uno:
    hover:  es cuando pasas el mouse sobre algo
    active: es justo cuando das click en algo
    visited: cuando ya has visitado un enlace anteriormente


13) Más pseudoclases
    :target, :not, :empty 


    target: es cuando estás navegando por una sección de la página.
    Por ejemplo:
    
    <div class="menu">
        <a href="#cursos">Cursos</a>
        <a href="#contacto">Contacto</a>
        <a href="#proyectos">Proyectos</a>
    </div>

    <div class="contenido">
        <div id="cursos">Estás viendo los cursos
            <img src="http://lenguajejs.com/vuejs/introduccion/que-es-vue/vuejs.png" alt="Pepe">
        </div>
        <div id="contacto">Estás viendo la sección de contacto</div>
        <div id="proyectos">Estás viendo los proyectos</div>
    </div>


    Podemos hacer que por defecto el contenido 
    no se visualice y con target hacer que si se vea.

    De esta forma:

    .contenido > *{
        display: none;
    }

    .contenido > *:target{
        display: block;
    }


    - :not()
    Selcciona a los elementos que no cumplñan
    con la condición

    Ejemplo:

    <div class="not-container">
        <div class="not"></div>
        <div class="not"></div>
        <div class="not"></div>
        <div class="not"></div>
    </div>

    .not{
        display: inline-block;
        background: red;
        margin: 1em;
        width: 100px;
        height: 100px;
        border-radius: 20px;
    }

    .not-container:hover .not:not(:hover){
        opacity: 0.5;
    }

    De esta forma cuando pases el mouse por el contenedor
    todas  tendrán opacidad, pero cuando quites el mouse
    del contenedor todas se volverán a ver igual.




    - :empty
    Sirve para encontrar elementos vacíos.
    Podriamos hacer que los elementos que 
    no tienen contenido no se visualicen.


14) Pseudoclases de formularios

    :required: selecciona os elementos
    que son requeridos.

    :checked: selecciona los elementos que tienen check

    :focus: es cuando estoy en un elemento en particular

    :is permite seleccionar varios elementos hijos
        ejemplo:
            ul a,
            ul li,
            ul span{
                color: red;
            }

            ul :is(a,li,span){
                color: red;
            }
    :where es muy parecido a :is pero este tiene especifidad de cero.
    Si queremos evitar problemas de especifidad podiamos
    utilizar :where en lugar de:is

15) Selectores por posición
    :first-child, :last-child,
    :first-of-type, :last-of-type


    :first-child: selecciona el primer hijo
    
    :last-chlld selecciona el ultimo elemento hijo
    
    <elem>:first-of-type selecciona el primer
    elemento hijo de tipo <elem>

    <elem>:last-of-type selecciona el último
    elemento hijo de tipo <elem>


16) <elem>:nth-child()
    Permite seleccionar varios elementos html
    según un parámetro.
    
    El parámetro puede ser:

    odd: impares
    
    even: pares
    
    una ecuación: ejemplo (5n, 3n+1) tomando 
    en cuenta que n empieza en 0

    NOTA; podemos escojer los N primeros 
    haciendo algo como esto:
    .item:nth-child(-n+5)
    ya que se detendrá en el 0

17) nth-last-child()
    Es parecido a nth-child()
    pero va en reversa, empieza con N con un valor dependiendo
    la cantidad de hijos

18) <elem>:nth.of-type()
    Esta pseudoclase toma en cuenta la etiqueta html,
    asi que s ponemos algo como
    .item:nth-of-type(2n)

    contará por separado los elementos que tengan
    la clase "item".


19) Background en realidad es un shorthand, en realidad puede ser:
    background-color, background-size,
    background-image, background-repeat


20) Background-size
    Puede tener más allá de solo pixeles.

    auto: la imagen usa sus dimensiones naturales (de la imagen)

    contain: agranda el fondo hasta que rellene el alto o el ancho 
    del elemento, sin cortar la imagen

    cover: rellena el fondo completo pero puede cortarse la imagen

21) background-position
    Podemos hacer que el fondo se mueva hacia otras coordenadas como origen

    [x]px [y]px: movemos a ciertas coordenadas especificas.
    
    [x[% [y]%; usando porcentajes
    
    [left|right|top|bottom|center] [left|right|top|bottom|center]:
    usamos las posiciones ya por defecto.

22) background-clip
    La propiedad background-clip define hasta dónde se extiende el fondo (color o imagen)
    dentro de un elemento. Permite controlar si el fondo se recorta al borde, al área de padding o solo al contenido.

    background-clip: border-box | padding-box | content-box;

    border-box	(Valor por defecto) El fondo se extiende hasta el borde del borde del elemento, incluyendo el border.
    padding-box	El fondo no cubre el borde, se recorta al límite del padding.
    content-box	El fondo solo cubre el área del contenido, no el padding ni el border.


23) background-origin
    Parecido a background-clip, pero define dónde se empieza a dibujar el fondo, puede
    ser apartir del borde (border-box), o dentro del borde (padding-box)
    o donde empieza el contenido (content-box).

    
24) background-attachment 
    EL fondo puede moverse con el scroll o quedarse fijo

    Valores posibles: fixed

25) Backgrounds múltiples
    Con background podemos tener múltiples fondos, el primer fondo definido es el que estará
    al frente de todos los demás.

    Podemos definir el tamaño de cada fondo con background-size separados por comas.

26( Shorthand de Background
    background: image position / size repeat attachment origin clip;

27) El color en CSS
    Color de frente: color
    Color de fondo: propiedad background-color o background-image

28) Transparent
    Transparent es quitarle la visualización a un elemento (texto, color, fondo, etc)
    Pero tiene una ventaja: 
        El color y fondo sigue ahí con su espacio reservado, solamente se oculta.

    Un ejemplo de uso es una catalogo de productos arriba del footer.
    Cuando pasas el mouse sobre una card y se hace más grande se puede empujar el footer hacia abajo
    Esto sucede porque al hacerse más grande un elemento empuja a los demás.
    Sin embargo, para solucionarlo simplemente puedes asignar un borde abajo de X tamaño
    y ponerlo transparente. Así el espacio estará ahí pero no se visualizará (transparent)
    
29) Notaciones de color
    - RGB (red, green, blue)
    - Hexadecimal
    - HSL:
        H (Hue): tono de 0 a 360
        S (Saturation): intensidad del color, de 0, gris a 100% (el color puro)
        L (Light): es la luz, 0% para negro y 100% para blanco.

30) linear-gradient
    Es un fondo (tipo imagen) que se genera con colores
    Ejemplo:

    body{
        background: linear-gradient( [angulo], red, yellow) [Xpx];
        background-repeat: no-repeat;
    }

    NOTA: Para hacer buenos linear-gradient podemos apoyarnos del circulo cromatico.
    (usar colores cercanos).

    Otra NOTA: Se puede poner un valor de pixeles a linear-gradient para extender un color
    (hasta que medida se hará un color puro, aunque esto podría hacer que no se vea el difuminado).


    Otra nota: Se puede agregar el ángulo de esta forma:
    - to top
    - to right
    - to bottom
    - to left
    - to top [left | right] (esquinas)
    - to right [top | bottom] (esquinas)
    - to bottom [left | right] (esquinas)
    - to left [top | bottom] (esquinas)
    - X deg (X cantidad de grados)

31) radial-gradient
    Es muy parecido a linear-gradient. Por defecto crea una elipse en el centro. Pero se puede
    modificar:

    radial-gradient( [radioX] [radioT] at [dirección], color1, color2, ...);

    las direcciones pueden ser:
    - at X Y
    - at center center
    - at (posición) ( posición)

32) Gradientes repetidos (linear-gradient, radial-gradient)
    Es una forma de repetir un degradado (algo como background-image: repeat)

33) Unidades de medida
    rem: 1 rem siempre es 16px
    em: es una medida que toma la medida del padre. Por así decirlo es una unidad
    responsiva. 100% recomendada antes que usar píxeles.

34) Propiedades básicas de texto
    font-size: tamaño de letra
    font-style: normal | italic | (otros dependiendo la fuente)
    font-weight: normal | bold | [número]
    text-align: left | center | right | justify
    line-height: altura de línea
        - 1.3 se usa mucho para titulos
        - 1.5 se usa para contenido
    text-transform: uppercase | lowercase | capitalize
    text-decoration: underline | line-trought | none
        Es la línea que pasa por el texto
        
        underline: es el subrayado por defecto para <a>
        line-trought: es el tachado, muy usado en precios/promociones
        none: ninguno

*/




:root{
    --color: blue;
}

.opcion.active{
    color: var(--color);
}

[type="text"]{
    color: green;
    background-color: brown;
}

[type="password"]{
    color: green;
}

.div-center{
    width: 100px;
    height: 100px;
    background: red;
    margin-left: auto;
    margin-right: auto;
    border: 1px solid black;
}


.box{
    display: inline-block;
    /*width: 0;*/
    /*margin: 2em auto 0;
    color: red;*/
    /*height: 200px;*/
    /*margin: 2rem auto 0;*/
    border: 1px solid red;
    border-bottom-style: dashed;
    border-width: 70px;
    border-color: transparent transparent blue transparent;
}

.circle{
    margin-top: 2rem;

    width: 200px;
    height: 100px;
    border: 1px solid red;
    background: yellow;
    border-radius: 30px 60px 120px 90px;
    outline: 10px solid green;
}

.box-shadow{
    margin-top: 2rem;
    width: 200px;
    height: 100px;
    background: blue;
    box-shadow: 4px 4px 10px rgba(0,0,0,0.5);
}

.eclipse-container{
    margin-top: 2rem;
    width: 200px;
    height: 200px;
    background: black;
    
    display: flex;
    align-items: center;
    justify-content: center;
}

.eclipse{
    display: inline-block;
    width: 100px;
    height: 100px;
    background: black;
    border: 1px solid white;
    border-radius: 50px;
    box-shadow: 0 0 50px white;
}

.hover, .active, .visited{
    display: block;
    color: black;
}

.hover:hover{
    color: red;
    cursor: pointer;
}

.active:active{
    background: yellow;
}

.visited:visited{
    color: blue;
}

.contenido > *{
    display: none;
}

.contenido > *:target{
    display: block;
}

.not{
    display: inline-block;
    background: red;
    margin: 1em;
    width: 100px;
    height: 100px;
    border-radius: 20px;
}

.not-container:hover .not:not(:hover){
    opacity: 0.5;
}




.child{
    color: #1a1919;
    font-family: Arial, Helvetica, sans-serif;
    font-size: 30px;
}

.child:first-child{
    background: green;
}

.child:last-child{
    background: blue;
}

.child-container div:first-of-type{
    background: red;
}

.child-container div:last-of-type{
    background: yellow;
}



.tabla{
    margin-top: 15rem;
}

.item{
    display: inline-block;
    width: 80px;
    height: 80px;
    text-align: center;
    line-height: 80px;
    border-radius: 50px;
}

.item:nth-child(odd){
    background: red;
}

.item:nth-child(even){
    background: green;
}

.item:nth-child(3n){
    background: yellow;
}

.img{
    display: inline-block;
    width: 400px;
    height: 300px;
    border: 5px solid black;
    background-color: yellow;
    background-image: url('goku.jpeg');
    background-size: 200px;
    background-repeat: no-repeat;
    
    background-size: contain;
    background-size: cover;


    background-position: 5px 5px;
}





.bg-origin{
    width: 200px;
    height: 150px;
    background: yellow;
    border: 5px dashed black;

    padding: 25px;
    background-clip: content-box;
}

.bg-attachment{
    margin-top: 5rem;
    width: 200px;
    height: 100px;
    background: url(space.jpeg);
    border: 5px solid black;
    background-size: 300px;
    background-attachment: fixed;
}


.bg-multiple{
    margin-top: 5rem;
    width: 600px;
    height: 400px;
    border: 5px solid black;
    background: url(goku.jpeg),
                url(space.jpeg),
                yellow;
    background-size: 50%, 70%, 100%;
    background-repeat: no-repeat;
}